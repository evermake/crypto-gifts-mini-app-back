x-enrypoing: &entrypoint
  build:
    context: .
    dockerfile: Dockerfile
  depends_on:
    mongodb:
      condition: service_healthy
  networks:
    - app
  restart: always
  env_file: .prod.env

name: Gift App Production
services:
  mongodb:
    image: mongo:8
    environment:
      MONGO_APP_DATABASE: ${MONGO_APP_DATABASE}
      MONGO_REPLICA_HOST: host.docker.internal
      MONGO_REPLICA_PORT: 27018
    entrypoint: >
      /bin/bash -c '
      echo "rs.initiate()" > /docker-entrypoint-initdb.d/1-init-replicaset.js &&
      echo "db = db.getSiblingDB(process.env[$0]);" > /docker-entrypoint-initdb.d/2-init-db-collection.js &&
      echo "db.createCollection($1, { capped: false });" >> /docker-entrypoint-initdb.d/2-init-db-collection.js &&
      echo "db.init.insert([{ message: $2 }]);" >> /docker-entrypoint-initdb.d/2-init-db-collection.js &&
      /usr/local/bin/docker-entrypoint.sh mongod --replSet rs0 --bind_ip_all --noauth' "'MONGO_APP_DATABASE'" "'init'" "'db initialized successfully'"
    ports:
      - 127.0.0.1:27017:27017
    networks:
      app:
        ipv4_address: 192.168.123.2
    volumes:
      - data:/data/db
    restart: unless-stopped
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 60s

  test-api:
    <<: *entrypoint
    container_name: test-api
    environment:
      - LISTEN_PORT=3000
      - LISTEN_HOST=0.0.0.0
    expose:
      - "3000/tcp"
    ports:
      - 127.0.0.1:3000:3000
    command: npm run prod:test-api

volumes:
  data:
    name: data

networks:
  app:
    ipam:
      config:
      - subnet: 192.168.123.0/24
